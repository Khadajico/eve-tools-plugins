/*
 * The MIT License
 *
 * Copyright 2018 Andrew Norman.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.arrggh.eve.tools.plugin.character.impl.explorer;

import com.arrggh.eve.tools.plugin.character.api.auth.AuthState;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sun.net.httpserver.HttpServer;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.Base64;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author Andrew Norman
 */
public class AuthorisedCharacterDialog extends javax.swing.JDialog implements IMessageWriter {

    private final Logger LOG = Logger.getLogger(AuthorisedCharacterDialog.class.getName());

    private final DefaultListModel<String> messageModel = new DefaultListModel<>();
    private final ObjectMapper mapper = new ObjectMapper();
    private final String url;

    /**
     * Creates new form AuthorisedCharacterDialog
     */
    public AuthorisedCharacterDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();

        AuthState state = startWebServer();
        this.url = generateUrl(state);

        txtInstructions.setText(txtInstructions.getText() + "\n" + url);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtInstructions = new javax.swing.JTextArea();
        btnOpenBrowser = new javax.swing.JButton();
        btnCloseDialog = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstMessages = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        txtInstructions.setColumns(20);
        txtInstructions.setLineWrap(true);
        txtInstructions.setRows(5);
        txtInstructions.setText(org.openide.util.NbBundle.getMessage(AuthorisedCharacterDialog.class, "dialog.text")); // NOI18N
        jScrollPane1.setViewportView(txtInstructions);

        org.openide.awt.Mnemonics.setLocalizedText(btnOpenBrowser, org.openide.util.NbBundle.getMessage(AuthorisedCharacterDialog.class, "AuthorisedCharacterDialog.btnOpenBrowser.text")); // NOI18N
        btnOpenBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenBrowserActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnCloseDialog, org.openide.util.NbBundle.getMessage(AuthorisedCharacterDialog.class, "AuthorisedCharacterDialog.btnCloseDialog.text")); // NOI18N
        btnCloseDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseDialogActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AuthorisedCharacterDialog.class, "AuthorisedCharacterDialog.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(AuthorisedCharacterDialog.class, "AuthorisedCharacterDialog.jLabel2.text")); // NOI18N

        lstMessages.setModel(messageModel);
        jScrollPane3.setViewportView(lstMessages);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(btnOpenBrowser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCloseDialog))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOpenBrowser)
                .addGap(58, 58, 58)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCloseDialog)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseDialogActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnCloseDialogActionPerformed

    private void btnOpenBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenBrowserActionPerformed
        openUrlInBrowser(url);
    }//GEN-LAST:event_btnOpenBrowserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AuthorisedCharacterDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AuthorisedCharacterDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AuthorisedCharacterDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AuthorisedCharacterDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AuthorisedCharacterDialog dialog = new AuthorisedCharacterDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCloseDialog;
    private javax.swing.JButton btnOpenBrowser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> lstMessages;
    private javax.swing.JTextArea txtInstructions;
    // End of variables declaration//GEN-END:variables

    private void openUrlInBrowser(String url) {
        String os = System.getProperty("os.name").toLowerCase();
        LOG.log(Level.INFO, "On OS {0}, trying to open {1}.", new Object[]{os, url});
        try {
            Runtime rt = Runtime.getRuntime();
            if (os.contains("win")) {
                write("Starting Browser on Windows");
                rt.exec("rundll32 url.dll,FileProtocolHandler " + url);
            } else if (os.contains("mac")) {
                write("Starting Browser on Mac");
                rt.exec("open " + url);
            } else if (os.contains("nix") || os.contains("nux")) {
                write("Starting Browser on Unix");
                rt.exec("xdg-open " + url);
            } else {
                write("Cannot determine OS from [" + os + "], please copy URL into browser manually");
            }
        } catch (IOException ex) {
            write(ex.getMessage());
            write("Cannot start browser, please copy URL into browser manually");
        }
    }

    private AuthState startWebServer() {
        AuthState state = new AuthState();
        state.setUuid(UUID.randomUUID().toString());
        try {
            HttpServer server = HttpServer.create(new InetSocketAddress(0), 0);
            server.createContext("/", new AuthHandler(state, this));
            server.setExecutor(null); // creates a default executor
            server.start();
            int port = server.getAddress().getPort();
            state.setPort(port);
            LOG.log(Level.INFO, "Server Listening on {0}", port);
            return state;
        } catch (IOException e) {
            throw new IllegalStateException("Cannot start webserver", e);
        }
    }

    private String generateUrl(AuthState state) {
        try {
            String json = mapper.writeValueAsString(state);
            String encoded = Base64.getEncoder().encodeToString(json.getBytes());
            return "https://eve-tools-auth.herokuapp.com/authorise?state=" + encoded;
        } catch (JsonProcessingException ex) {
            throw new IllegalStateException("Cannot create url", ex);
        }
    }

    @Override
    public void write(String message) {
        messageModel.add(0, message);
    }
}
