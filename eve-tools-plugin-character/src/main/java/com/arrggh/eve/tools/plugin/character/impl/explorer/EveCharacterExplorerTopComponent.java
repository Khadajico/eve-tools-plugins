/*
 * The MIT License
 *
 * Copyright 2018 Andrew Norman.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.arrggh.eve.tools.plugin.character.impl.explorer;

import com.arrggh.eve.tools.plugin.character.api.IEveCharacter;
import com.arrggh.eve.tools.plugin.character.api.IEveCharacterManager;
import com.arrggh.eve.tools.plugin.character.api.actions.IEveCharacterMouseMenuAction;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Collection;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 *
 * @author Andrew Norman
 */
@ConvertAsProperties(
        dtd = "-//com.arrggh.eve.tools.plugin.character.impl.explorer//EveCharacterExplorer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "EveCharacterExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.arrggh.eve.tools.plugin.character.impl.explorer.EveCharacterExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_EveCharacterExplorerAction",
        preferredID = "EveCharacterExplorerTopComponent"
)
@Messages({
    "CTL_EveCharacterExplorerAction=EveCharacterExplorer",
    "CTL_EveCharacterExplorerTopComponent=EveCharacterExplorer Window",
    "HINT_EveCharacterExplorerTopComponent=This is a EveCharacterExplorer window"
})
public final class EveCharacterExplorerTopComponent extends TopComponent {

    private final Logger LOG = Logger.getLogger(EveCharacterExplorerTopComponent.class.getName());

    private final InstanceContent content = new InstanceContent();
    private transient IEveCharacterManager characterManager;

    public EveCharacterExplorerTopComponent() {
        this.characterManager = Lookup.getDefault().lookup(IEveCharacterManager.class);

        initComponents();
        setupMouseListener();
        setName(Bundle.CTL_EveCharacterExplorerTopComponent());
        setToolTipText(Bundle.HINT_EveCharacterExplorerTopComponent());

        content.set(Collections.emptySet(), null);

        lstCharacters.addListSelectionListener((ListSelectionEvent e) -> {
            IEveCharacter selected = lstCharacters.getSelectedValue();
            if (selected != null) {
                LOG.log(Level.INFO, "Broadcasting new selection {0}", selected.getName());
                content.set(Collections.singleton(selected), null);
            }
        });

        associateLookup(new AbstractLookup(content));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddCharacter = new javax.swing.JButton();
        scrPane = new javax.swing.JScrollPane();
        lstCharacters = new javax.swing.JList<>();

        org.openide.awt.Mnemonics.setLocalizedText(btnAddCharacter, org.openide.util.NbBundle.getMessage(EveCharacterExplorerTopComponent.class, "EveCharacterExplorerTopComponent.btnAddCharacter.text")); // NOI18N
        btnAddCharacter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCharacterActionPerformed(evt);
            }
        });

        lstCharacters.setModel(new EveCharacterListModel(characterManager));
        lstCharacters.setCellRenderer(new EveCharacterListCellRenderer());
        scrPane.setViewportView(lstCharacters);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrPane)
                    .addComponent(btnAddCharacter, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrPane, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddCharacter)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddCharacterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCharacterActionPerformed

        JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
        AuthorisedCharacterDialog dialog = new AuthorisedCharacterDialog(topFrame, true);
        dialog.setLocationRelativeTo(topFrame);
        dialog.setVisible(true);
    }//GEN-LAST:event_btnAddCharacterActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCharacter;
    private javax.swing.JList<IEveCharacter> lstCharacters;
    private javax.swing.JScrollPane scrPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    private void setupMouseListener() {
        lstCharacters.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    Collection<? extends IEveCharacterMouseMenuAction> actions = Lookup.getDefault().lookupAll(IEveCharacterMouseMenuAction.class);

                    lstCharacters.setSelectedIndex(lstCharacters.locationToIndex(e.getPoint()));

                    IEveCharacter character = lstCharacters.getSelectedValue();
                    if (character != null) {
                        LOG.log(Level.INFO, "Right click on {0} showing {1} actions", new Object[]{character.getName(), actions.size()});
                        JPopupMenu menu = new JPopupMenu();
                        for (IEveCharacterMouseMenuAction action : actions) {
                            JMenuItem menuItem = new JMenuItem(action.getText());
                            menuItem.addActionListener((ActionEvent e1) -> {
                                action.performAction(character);
                            });
                            menu.add(menuItem);
                        }
                        menu.show(lstCharacters, e.getPoint().x, e.getPoint().y);
                    }
                }
            }
        });
    }
}
